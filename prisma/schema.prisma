generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  SUPERVISOR
  ADMIN
}

enum DocumentStatus {
  DRAFT
  PENDING
  APPROVED
}

model User {
  id            String          @id @default(cuid())
  firstName     String?
  lastName      String?
  address       String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  isAllowed     Boolean         @default(false)
  role          Role            @default(USER)
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  invoices      Invoice[]
  powras        POWRA[]
  fplMissions   FPLMission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Invoice {
  id String @id @default(uuid())

  invoiceName   String
  total         Int
  status        InvoiceStatus
  date          DateTime
  dueDate       Int
  fromName      String
  fromEmail     String
  fromAddress   String
  clientName    String
  clientEmail   String
  clientAddress String
  currency      String
  invoiceNumber Int
  note          String?

  invoiceItemDescription String
  invoiceItemQuantity    Int
  invoiceItemRate        Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

enum InvoiceStatus {
  PAID
  PENDING
}

enum POWRAStatus {
  DRAFT
  SUBMITTED
  APPROVED
}

model POWRA {
  id                   String           @id @default(uuid())
  status               POWRAStatus      @default(DRAFT)
  site                 String
  date                 DateTime
  time                 String
  pilotName            String
  location             String
  chiefPilot           String
  hse                  String
  beforeStartChecklist String[]
  reviewNames          String[]
  reviewDates          DateTime[]
  lessonsLearned       Boolean
  reviewComments       String?
  userId               String
  user                 User             @relation(fields: [userId], references: [id])
  controlMeasures      ControlMeasure[]
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
}

model ControlMeasure {
  id        String @id @default(uuid())
  hazardNo  String
  measures  String
  risk      Risk
  powraId   String
  powra     POWRA  @relation(fields: [powraId], references: [id], onDelete: Cascade)
}

enum Risk {
  L
  M
  H
}

model FPLMission {
  id                    String   @id @default(uuid())
  status                DocumentStatus @default(DRAFT)
  siteId                String
  userId                String
  user                  User     @relation(fields: [userId], references: [id])
  riskMatrix            RiskMatrix?
  missionPlanningScript MissionPlanningScript?
  tailboards            TailboardDocument[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model RiskMatrix {
  id           String   @id @default(uuid())
  status       DocumentStatus @default(DRAFT)
  content      String
  fplMissionId String   @unique
  fplMission   FPLMission @relation(fields: [fplMissionId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model MissionPlanningScript {
  id           String   @id @default(uuid())
  status       DocumentStatus @default(DRAFT)
  content      String
  fplMissionId String   @unique
  fplMission   FPLMission @relation(fields: [fplMissionId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model TailboardDocument {
  id           String   @id @default(uuid())
  status       DocumentStatus @default(DRAFT)
  content      String
  date         DateTime
  fplMissionId String
  fplMission   FPLMission @relation(fields: [fplMissionId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
